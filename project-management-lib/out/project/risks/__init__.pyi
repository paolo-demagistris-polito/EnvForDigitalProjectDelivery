from typing import Any

class RiskMetaClass(type):
    pattern: str
    def __getattr__(cls, attr): ...

class Risk(metaclass=RiskMetaClass):
    risk_name: Any
    def __init__(self, name: str, probability: float, impact: float) -> None: ...
    def get_risk_score(self): ...
    @property
    def risk_owner(self): ...
    def assign_risk_owner(self, value) -> None: ...
    @property
    def description(self): ...
    @description.setter
    def description(self, value) -> None: ...
    @property
    def probability(self): ...
    @probability.setter
    def probability(self, value: float): ...
    @property
    def impact(self): ...
    @impact.setter
    def impact(self, value: float): ...
    @property
    def counter_measure(self): ...
    def set_counter_measure(self, counter_measure: str): ...
